{"version":3,"sources":["bao-tran-angular/accordion/accordion.config.ts","bao-tran-angular/accordion/accordion.component.ts","bao-tran-angular/accordion/accordion-group.component.ts","bao-tran-angular/accordion/accordion.module.ts"],"names":[],"mappings":"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","file":"vendors~components-accordion-demo-accordion-module.js","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * Configuration service, provides default values for the AccordionComponent.\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AccordionConfig {\r\n  /** Whether the other panels should be closed when a panel is opened */\r\n  closeOthers: Boolean = false;\r\n  /** turn on/off animation */\r\n  isAnimated: Boolean = false;\r\n}\r\n","import { Component, Input } from '@angular/core';\r\nimport { AccordionPanelComponent } from './accordion-group.component';\r\nimport { AccordionConfig } from './accordion.config';\r\n\r\n/** Displays collapsible content panels for presenting information in a limited amount of space. */\r\n@Component({\r\n  selector: 'accordion',\r\n  template: `<ng-content></ng-content>`,\r\n  host: {\r\n    '[attr.aria-multiselectable]': 'closeOthers',\r\n    role: 'tablist',\r\n    class: 'panel-group',\r\n    style: 'display: block'\r\n  }\r\n})\r\nexport class AccordionComponent {\r\n  /** turn on/off animation */\r\n  @Input() isAnimated = false;\r\n  /** if `true` expanding one item will close all others */\r\n  @Input() closeOthers: boolean;\r\n\r\n  protected groups: AccordionPanelComponent[] = [];\r\n\r\n  constructor(config: AccordionConfig) {\r\n    Object.assign(this, config);\r\n  }\r\n\r\n  closeOtherPanels(openGroup: AccordionPanelComponent): void {\r\n    if (!this.closeOthers) {\r\n      return;\r\n    }\r\n\r\n    this.groups.forEach((group: AccordionPanelComponent) => {\r\n      if (group !== openGroup) {\r\n        group.isOpen = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  addGroup(group: AccordionPanelComponent): void {\r\n    group.isAnimated = this.isAnimated;\r\n    this.groups.push(group);\r\n  }\r\n\r\n  removeGroup(group: AccordionPanelComponent): void {\r\n    const index = this.groups.indexOf(group);\r\n    if (index !== -1) {\r\n      this.groups.splice(index, 1);\r\n    }\r\n  }\r\n}\r\n","import {\n  Component, HostBinding, Inject, Input, OnDestroy, OnInit, Output, EventEmitter\n} from '@angular/core';\nimport { isBs3 } from 'bao-tran-angular/utils';\nimport { AccordionComponent } from './accordion.component';\n\n/**\n * ### Accordion heading\n * Instead of using `heading` attribute on the `accordion-group`, you can use\n * an `accordion-heading` attribute on `any` element inside of a group that\n * will be used as group's header template.\n */\n@Component({\n  selector: 'accordion-group, accordion-panel',\n  templateUrl: './accordion-group.component.html',\n  host: {\n    class: 'panel',\n    style: 'display: block'\n  },\n  styleUrls: ['./accordion.scss']\n})\nexport class AccordionPanelComponent implements OnInit, OnDestroy {\n  /** turn on/off animation */\n  isAnimated = false;\n  /** Clickable text in accordion's group header, check `accordion heading` below for using html in header */\n  @Input() heading: string;\n  /** Provides an ability to use Bootstrap's contextual panel classes\n   * (`panel-primary`, `panel-success`, `panel-info`, etc...).\n   * List of all available classes [available here]\n   * (https://getbootstrap.com/docs/3.3/components/#panels-alternatives)\n   */\n  @Input() panelClass: string;\n  /** if <code>true</code> â€” disables accordion group */\n  @Input() isDisabled: boolean;\n  /** Emits when the opened state changes */\n  @Output() isOpenChange: EventEmitter<boolean> = new EventEmitter();\n\n  // Questionable, maybe .panel-open should be on child div.panel element?\n  /** Is accordion group open or closed. This property supports two-way binding */\n  @HostBinding('class.panel-open')\n  @Input()\n  get isOpen(): boolean {\n    return this._isOpen;\n  }\n\n  set isOpen(value: boolean) {\n    if (value !== this.isOpen) {\n      if (value) {\n        this.accordion.closeOtherPanels(this);\n      }\n      this._isOpen = value;\n      Promise.resolve(null).then(() => {\n        this.isOpenChange.emit(value);\n      })\n        .catch((error: Error) => {\n          /* tslint:disable: no-console */\n          console.log(error);\n        });\n    }\n  }\n\n  get isBs3(): boolean {\n    return isBs3();\n  }\n\n  protected _isOpen = false;\n  protected accordion: AccordionComponent;\n\n  constructor(@Inject(AccordionComponent) accordion: AccordionComponent) {\n    this.accordion = accordion;\n  }\n\n  ngOnInit(): void {\n    this.panelClass = this.panelClass || 'panel-default';\n    this.accordion.addGroup(this);\n  }\n\n  ngOnDestroy(): void {\n    this.accordion.removeGroup(this);\n  }\n\n  toggleOpen(): void {\n    if (!this.isDisabled) {\n      this.isOpen = !this.isOpen;\n    }\n  }\n}\n","/* tslint:disable: max-classes-per-file */\nimport { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { AccordionComponent } from './accordion.component';\nimport { AccordionPanelComponent } from './accordion-group.component';\nimport { CollapseModule } from 'bao-tran-angular/collapse';\n\n@NgModule({\n  imports: [CommonModule, CollapseModule],\n  declarations: [AccordionComponent, AccordionPanelComponent],\n  exports: [AccordionComponent, AccordionPanelComponent]\n})\nexport class AccordionModule {\n  static forRoot(): ModuleWithProviders<AccordionModule> {\n    return { ngModule: AccordionModule, providers: [] };\n  }\n}\n"],"sourceRoot":"webpack:///"}