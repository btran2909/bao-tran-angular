{"version":3,"sources":["bao-tran-angular/sortable/draggable-item.service.ts","bao-tran-angular/sortable/sortable.component.ts","bao-tran-angular/sortable/sortable.module.ts"],"names":[],"mappings":"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","file":"vendors~components-sortable-demo-sortable-module.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { DraggableItem } from './draggable-item';\r\n\r\n@Injectable()\r\nexport class DraggableItemService {\r\n  private draggableItem: DraggableItem;\r\n\r\n  private onCapture: Subject<DraggableItem> = new Subject<DraggableItem>();\r\n\r\n  dragStart(item: DraggableItem): void {\r\n    this.draggableItem = item;\r\n  }\r\n\r\n  getItem(): DraggableItem {\r\n    return this.draggableItem;\r\n  }\r\n\r\n  captureItem(overZoneIndex: number, newIndex: number): DraggableItem {\r\n    if (this.draggableItem.overZoneIndex !== overZoneIndex) {\r\n      this.draggableItem.lastZoneIndex = this.draggableItem.overZoneIndex;\r\n      this.draggableItem.overZoneIndex = overZoneIndex;\r\n      this.onCapture.next(this.draggableItem);\r\n      this.draggableItem = Object.assign({}, this.draggableItem, {\r\n        overZoneIndex,\r\n        i: newIndex\r\n      });\r\n    }\r\n\r\n    return this.draggableItem;\r\n  }\r\n\r\n  onCaptureItem(): Subject<DraggableItem> {\r\n    return this.onCapture;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  forwardRef,\r\n  TemplateRef\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\r\nimport { DraggableItem } from './draggable-item';\r\nimport { DraggableItemService } from './draggable-item.service';\r\n\r\n/* tslint:disable */\r\n@Component({\r\n  selector: 'bs-sortable',\r\n  exportAs: 'bs-sortable',\r\n  template: `\r\n<div\r\n    [ngClass]=\"wrapperClass\"\r\n    [ngStyle]=\"wrapperStyle\"\r\n    (dragover)=\"cancelEvent($event)\"\r\n    (dragenter)=\"cancelEvent($event)\"\r\n    (drop)=\"resetActiveItem($event)\"\r\n    (mouseleave)=\"resetActiveItem($event)\">\r\n  <div\r\n        *ngIf=\"showPlaceholder\"\r\n        [ngClass]=\"placeholderClass\"\r\n        [ngStyle]=\"placeholderStyle\"\r\n        (dragover)=\"onItemDragover($event, 0)\"\r\n        (dragenter)=\"cancelEvent($event)\"\r\n    >{{placeholderItem}}</div>\r\n    <div\r\n        *ngFor=\"let item of items; let i=index;\"\r\n        [ngClass]=\"[ itemClass, i === activeItem ? itemActiveClass : '' ]\"\r\n        [ngStyle]=\"getItemStyle(i === activeItem)\"\r\n        draggable=\"true\"\r\n        (dragstart)=\"onItemDragstart($event, item, i)\"\r\n        (dragend)=\"resetActiveItem($event)\"\r\n        (dragover)=\"onItemDragover($event, i)\"\r\n        (dragenter)=\"cancelEvent($event)\"\r\n        aria-dropeffect=\"move\"\r\n        [attr.aria-grabbed]=\"i === activeItem\"\r\n    ><ng-template [ngTemplateOutlet]=\"itemTemplate || defItemTemplate\"\r\n  [ngTemplateOutletContext]=\"{item:item, index: i}\"></ng-template></div>\r\n</div>\r\n\r\n<ng-template #defItemTemplate let-item=\"item\">{{item.value}}</ng-template>  \r\n`,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => SortableComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\n/* tslint:enable */\r\nexport class SortableComponent implements ControlValueAccessor {\r\n  private static globalZoneIndex = 0;\r\n  /** field name if input array consists of objects */\r\n  @Input() fieldName: string;\r\n\r\n  /** class name for items wrapper */\r\n  @Input() wrapperClass = '';\r\n\r\n  /** style object for items wrapper */\r\n  @Input() wrapperStyle: { [key: string]: string } = {};\r\n\r\n  /** class name for item */\r\n  @Input() itemClass = '';\r\n\r\n  /** style object for item */\r\n  @Input() itemStyle: { [key: string]: string } = {};\r\n\r\n  /** class name for active item */\r\n  @Input() itemActiveClass = '';\r\n\r\n  /** style object for active item */\r\n  @Input() itemActiveStyle: { [key: string]: string } = {};\r\n\r\n  /** class name for placeholder */\r\n  @Input() placeholderClass = '';\r\n\r\n  /** style object for placeholder */\r\n  @Input() placeholderStyle: { [key: string]: string } = {};\r\n\r\n  /** placeholder item which will be shown if collection is empty */\r\n  @Input() placeholderItem = '';\r\n\r\n  /** used to specify a custom item template. Template variables: item and index; */\r\n  /* tslint:disable-next-line: no-any */\r\n  @Input() itemTemplate: TemplateRef<any>;\r\n\r\n  /** fired on array change (reordering, insert, remove), same as <code>ngModelChange</code>.\r\n   *  Returns new items collection as a payload.\r\n   */\r\n  /* tslint:disable-next-line: no-any */\r\n  @Output() onChange: EventEmitter<any[]> = new EventEmitter<any[]>();\r\n\r\n  showPlaceholder = false;\r\n  activeItem = -1;\r\n\r\n  get items(): SortableItem[] {\r\n    return this._items;\r\n  }\r\n\r\n  set items(value: SortableItem[]) {\r\n    this._items = value;\r\n    const out = this.items.map((x: SortableItem) => x.initData);\r\n    this.onChanged(out);\r\n    this.onChange.emit(out);\r\n  }\r\n\r\n  /* tslint:disable-next-line: no-any */\r\n  onTouched: any = Function.prototype;\r\n  /* tslint:disable-next-line: no-any */\r\n  onChanged: any = Function.prototype;\r\n\r\n  private transfer: DraggableItemService;\r\n  private currentZoneIndex: number;\r\n  private _items: SortableItem[];\r\n\r\n  constructor(transfer: DraggableItemService) {\r\n    this.transfer = transfer;\r\n    this.currentZoneIndex = SortableComponent.globalZoneIndex++;\r\n    this.transfer\r\n      .onCaptureItem()\r\n      .subscribe((item: DraggableItem) => this.onDrop(item));\r\n  }\r\n\r\n  onItemDragstart(\r\n    event: DragEvent,\r\n    item: SortableItem,\r\n    i: number\r\n  ): void {\r\n    this.initDragstartEvent(event);\r\n    this.onTouched();\r\n    this.transfer.dragStart({\r\n      event,\r\n      item,\r\n      i,\r\n      initialIndex: i,\r\n      lastZoneIndex: this.currentZoneIndex,\r\n      overZoneIndex: this.currentZoneIndex\r\n    });\r\n  }\r\n\r\n  onItemDragover(event: DragEvent, i: number): void {\r\n    if (!this.transfer.getItem()) {\r\n      return;\r\n    }\r\n    event.preventDefault();\r\n    const dragItem = this.transfer.captureItem(\r\n      this.currentZoneIndex,\r\n      this.items.length\r\n    );\r\n\r\n    /* tslint:disable-next-line: no-any */\r\n    let newArray: any[] = [];\r\n\r\n    if (!this.items.length) {\r\n      newArray = [dragItem.item];\r\n    } else if (dragItem.i > i) {\r\n      newArray = [\r\n        ...this.items.slice(0, i),\r\n        dragItem.item,\r\n        ...this.items.slice(i, dragItem.i),\r\n        ...this.items.slice(dragItem.i + 1)\r\n      ];\r\n    } else {\r\n      // this.draggedItem.i < i\r\n      newArray = [\r\n        ...this.items.slice(0, dragItem.i),\r\n        ...this.items.slice(dragItem.i + 1, i + 1),\r\n        dragItem.item,\r\n        ...this.items.slice(i + 1)\r\n      ];\r\n    }\r\n    this.items = newArray;\r\n    dragItem.i = i;\r\n    this.activeItem = i;\r\n    this.updatePlaceholderState();\r\n  }\r\n\r\n  cancelEvent(event: DragEvent): void {\r\n    if (!this.transfer.getItem() || !event) {\r\n      return;\r\n    }\r\n    event.preventDefault();\r\n  }\r\n\r\n  onDrop(item: DraggableItem): void {\r\n    if (\r\n      item &&\r\n      item.overZoneIndex !== this.currentZoneIndex &&\r\n      item.lastZoneIndex === this.currentZoneIndex\r\n    ) {\r\n      this.items = this.items.filter(\r\n        (x: SortableItem, i: number) => i !== item.i\r\n      );\r\n      this.updatePlaceholderState();\r\n    }\r\n    this.resetActiveItem(undefined);\r\n  }\r\n\r\n  resetActiveItem(event: DragEvent): void {\r\n    this.cancelEvent(event);\r\n    this.activeItem = -1;\r\n  }\r\n\r\n  registerOnChange(callback: () => void): void {\r\n    this.onChanged = callback;\r\n  }\r\n\r\n  registerOnTouched(callback: () => void): void {\r\n    this.onTouched = callback;\r\n  }\r\n\r\n  /* tslint:disable-next-line: no-any */\r\n  writeValue(value: any[]): void {\r\n    if (value) {\r\n      /* tslint:disable-next-line: no-any */\r\n      this.items = value.map((x: any, i: number) => ({\r\n        id: i,\r\n        initData: x,\r\n        value: this.fieldName ? x[this.fieldName] : x\r\n      }));\r\n    } else {\r\n      this.items = [];\r\n    }\r\n    this.updatePlaceholderState();\r\n  }\r\n\r\n  updatePlaceholderState(): void {\r\n    this.showPlaceholder = !this._items.length;\r\n  }\r\n\r\n  getItemStyle(isActive: boolean): {} {\r\n    return isActive\r\n      ? Object.assign({}, this.itemStyle, this.itemActiveStyle)\r\n      : this.itemStyle;\r\n  }\r\n\r\n  // tslint:disable-next-line\r\n  private initDragstartEvent(event: DragEvent): void {\r\n    // it is necessary for mozilla\r\n    // data type should be 'Text' instead of 'text/plain' to keep compatibility\r\n    // with IE\r\n    event.dataTransfer.setData('Text', 'placeholder');\r\n  }\r\n}\r\n\r\nexport declare interface SortableItem {\r\n  id: number;\r\n  value: string;\r\n  /* tslint:disable-next-line: no-any */\r\n  initData: any;\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { SortableComponent } from './sortable.component';\r\nimport { DraggableItemService } from './draggable-item.service';\r\n\r\n@NgModule({\r\n  declarations: [SortableComponent],\r\n  imports: [CommonModule],\r\n  exports: [SortableComponent]\r\n})\r\nexport class SortableModule {\r\n  static forRoot(): ModuleWithProviders<SortableModule> {\r\n    return { ngModule: SortableModule, providers: [DraggableItemService] };\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}