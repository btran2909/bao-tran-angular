{"version":3,"sources":["bao-tran-angular/progressbar/progressbar.config.ts","bao-tran-angular/progressbar/progressbar.component.ts","bao-tran-angular/progressbar/bar.component.ts","bao-tran-angular/progressbar/progressbar.module.ts"],"names":[],"mappings":"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","file":"vendors~components-progressbar-demo-progressbar-module.js","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProgressbarConfig {\r\n  /** if `true` changing value of progress bar will be animated */\r\n  animate: Boolean = false;\r\n  /** maximum total value of progress element */\r\n  max = 100;\r\n}\r\n","import { Component, HostBinding, Input } from '@angular/core';\nimport { ProgressbarConfig } from './progressbar.config';\nimport { ProgressbarType } from './progressbar-type.interface';\nimport { isBs3 } from 'bao-tran-angular/utils';\nimport { BarComponent } from './bar.component';\n\n@Component({\n  selector: 'progressbar',\n  templateUrl: './progressbar.component.html',\n  styles: [\n    `\n    :host {\n      width: 100%;\n      display: flex;\n    }\n  `\n  ]\n})\nexport class ProgressbarComponent {\n  /** if `true` changing value of progress bar will be animated */\n  @Input()\n  set animate(value: boolean) {\n    this._animate = value;\n    this.bars.forEach((b: BarComponent) => {\n      b.animate = value;\n    });\n  }\n  /** If `true`, striped classes are applied */\n  @Input()\n  set striped(value: boolean) {\n    this._striped = value;\n    this.bars.forEach((b: BarComponent) => {\n      b.striped = value;\n    });\n  }\n\n  /** provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger` */\n  @Input() type: ProgressbarType;\n  /** current value of progress bar. Could be a number or array of objects\n   * like {\"value\":15,\"type\":\"info\",\"label\":\"15 %\"}\n   */\n  @Input()\n  /* tslint:disable-next-line:no-any */\n  set value(value: number | any[]) {\n    this.isStacked = Array.isArray(value);\n    this._value = value;\n  }\n  isStacked = false;\n  _striped: boolean;\n  _animate: boolean;\n  _max = 100;\n\n  /* tslint:disable-next-line:no-any */\n  _value: number | any[];\n  get isBs3(): boolean {\n    return isBs3();\n  }\n\n  /** maximum total value of progress element */\n  @HostBinding('attr.max')\n  @Input()\n  get max(): number {\n    return this._max;\n  }\n\n  set max(v: number) {\n    this._max = v;\n    this.bars.forEach((bar: BarComponent) => {\n      bar.recalculatePercentage();\n    });\n  }\n\n  @HostBinding('class.progress') addClass = true;\n\n  /* tslint:disable-next-line:no-any */\n  bars: BarComponent[] = [];\n  constructor(config: ProgressbarConfig) {\n    Object.assign(this, config);\n  }\n  addBar(bar: BarComponent): void {\n    bar.animate = this._animate;\n    bar.striped = this._striped;\n\n    this.bars.push(bar);\n  }\n\n  removeBar(bar: BarComponent): void {\n    this.bars.splice(this.bars.indexOf(bar), 1);\n  }\n}\n","import {\n  Component,\n  Host,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Renderer2, SimpleChanges\n} from '@angular/core';\n\nimport { ProgressbarComponent } from './progressbar.component';\nimport { isBs3 } from 'bao-tran-angular/utils';\n\n// todo: number pipe\n// todo: use query from progress?\n@Component({\n  selector: 'bar',\n  templateUrl: './bar.component.html',\n  host: {\n    role: 'progressbar',\n    'aria-valuemin': '0',\n    '[class.progress-bar-animated]': '!isBs3 && animate',\n    '[class.progress-bar-striped]': 'striped',\n    '[class.active]': 'isBs3 && animate',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-valuetext]': 'percent ? percent.toFixed(0) + \"%\" : \"\"',\n    '[attr.aria-valuemax]': 'max',\n    '[style.height.%]': '\"100\"'\n  }\n})\nexport class BarComponent implements OnInit, OnDestroy {\n  @Input() max: number;\n  /** provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger` */\n  @Input() type: string;\n\n  /** current value of progress bar */\n  @Input() value: number;\n\n  @HostBinding('style.width.%')\n  get setBarWidth() {\n    this.recalculatePercentage();\n\n    return this.percent;\n  }\n\n  @HostBinding('class.progress-bar') addClass = true;\n\n  get isBs3(): boolean {\n    return isBs3();\n  }\n\n  striped: boolean;\n  animate: boolean;\n  percent = 0;\n  progress: ProgressbarComponent;\n\n  private _prevType: string;\n\n  constructor(\n    private el: ElementRef,\n    @Host() progress: ProgressbarComponent,\n    private renderer: Renderer2\n  ) {\n    this.progress = progress;\n  }\n\n  ngOnInit(): void {\n    this.progress.addBar(this);\n  }\n\n  ngOnDestroy(): void {\n    this.progress.removeBar(this);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.value) {\n      if (!changes.value.currentValue && changes.value.currentValue !== 0) {\n        return;\n      }\n      this.value = changes.value.currentValue;\n      this.recalculatePercentage();\n    }\n\n    if (changes.type) {\n      this.type = changes.type.currentValue;\n      this.applyTypeClasses();\n    }\n  }\n\n  recalculatePercentage(): void {\n    this.percent = +(this.value / this.progress.max * 100).toFixed(2);\n\n    const totalPercentage = this.progress.bars\n      .reduce(function (total: number, bar: BarComponent): number {\n        return total + bar.percent;\n      }, 0);\n\n    if (totalPercentage > 100) {\n      this.percent -= totalPercentage - 100;\n    }\n  }\n\n  private applyTypeClasses(): void {\n    if (this._prevType) {\n      const barTypeClass = `progress-bar-${this._prevType}`;\n      const bgClass = `bg-${this._prevType}`;\n      this.renderer.removeClass(this.el.nativeElement, barTypeClass);\n      this.renderer.removeClass(this.el.nativeElement, bgClass);\n      this._prevType = null;\n    }\n\n    if (this.type) {\n      const barTypeClass = `progress-bar-${this.type}`;\n      const bgClass = `bg-${this.type}`;\n      this.renderer.addClass(this.el.nativeElement, barTypeClass);\n      this.renderer.addClass(this.el.nativeElement, bgClass);\n      this._prevType = this.type;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { BarComponent } from './bar.component';\r\nimport { ProgressbarComponent } from './progressbar.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [BarComponent, ProgressbarComponent],\r\n  exports: [BarComponent, ProgressbarComponent]\r\n})\r\nexport class ProgressbarModule {\r\n  static forRoot(): ModuleWithProviders<ProgressbarModule> {\r\n    return { ngModule: ProgressbarModule, providers: [] };\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}