{"version":3,"sources":["bao-tran-angular/buttons/button-checkbox.directive.ts","bao-tran-angular/buttons/button-radio.directive.ts","bao-tran-angular/buttons/button-radio-group.directive.ts","bao-tran-angular/buttons/buttons.module.ts"],"names":["RADIO_CONTROL_VALUE_ACCESSOR"],"mappings":"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","file":"vendors~components-buttons-demo-buttons-module.js","sourcesContent":["// tslint:disable:no-use-before-declare\r\nimport {\r\n  Directive,\r\n  forwardRef,\r\n  HostBinding,\r\n  HostListener,\r\n  Input,\r\n  OnInit,\r\n  Provider\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\n// TODO: config: activeClass - Class to apply to the checked buttons\r\nexport const CHECKBOX_CONTROL_VALUE_ACCESSOR: Provider = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  /* tslint:disable-next-line: no-use-before-declare */\r\n  useExisting: forwardRef(() => ButtonCheckboxDirective),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * Add checkbox functionality to any element\r\n */\r\n@Directive({\r\n  selector: '[btnCheckbox]',\r\n  providers: [CHECKBOX_CONTROL_VALUE_ACCESSOR]\r\n})\r\nexport class ButtonCheckboxDirective implements ControlValueAccessor, OnInit {\r\n  /** Truthy value, will be set to ngModel */\r\n  @Input() btnCheckboxTrue = true;\r\n  /** Falsy value, will be set to ngModel */\r\n  @Input() btnCheckboxFalse = false;\r\n\r\n  @HostBinding('class.active')\r\n  @HostBinding('attr.aria-pressed')\r\n  state = false;\r\n\r\n  protected value: boolean | string;\r\n  protected isDisabled: boolean;\r\n\r\n  protected onChange = Function.prototype;\r\n  protected onTouched = Function.prototype;\r\n\r\n  // view -> model\r\n  @HostListener('click')\r\n  onClick(): void {\r\n    if (this.isDisabled) {\r\n      return;\r\n    }\r\n\r\n    this.toggle(!this.state);\r\n    this.onChange(this.value);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.toggle(this.trueValue === this.value);\r\n  }\r\n\r\n  protected get trueValue(): boolean {\r\n    return typeof this.btnCheckboxTrue !== 'undefined'\r\n      ? this.btnCheckboxTrue\r\n      : true;\r\n  }\r\n\r\n  protected get falseValue(): boolean {\r\n    return typeof this.btnCheckboxFalse !== 'undefined'\r\n      ? this.btnCheckboxFalse\r\n      : false;\r\n  }\r\n\r\n  toggle(state: boolean): void {\r\n    this.state = state;\r\n    this.value = this.state ? this.trueValue : this.falseValue;\r\n  }\r\n\r\n  // ControlValueAccessor\r\n  // model -> view\r\n  writeValue(value: boolean | string | null): void {\r\n    this.state = this.trueValue === value;\r\n    this.value = value ? this.trueValue : this.falseValue;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.isDisabled = isDisabled;\r\n  }\r\n\r\n  registerOnChange(fn: () => {}): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => {}): void {\r\n    this.onTouched = fn;\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectorRef,\r\n  Directive,\r\n  ElementRef,\r\n  forwardRef,\r\n  HostBinding,\r\n  HostListener,\r\n  Inject,\r\n  Input,\r\n  OnInit,\r\n  Optional,\r\n  Provider,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\r\n\r\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  /* tslint:disable-next-line: no-use-before-declare */\r\n  useExisting: forwardRef(() => ButtonRadioDirective),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * Create radio buttons or groups of buttons.\r\n * A value of a selected button is bound to a variable specified via ngModel.\r\n */\r\n@Directive({\r\n  selector: '[btnRadio]',\r\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\r\n})\r\nexport class ButtonRadioDirective implements ControlValueAccessor, OnInit {\r\n  onChange = Function.prototype;\r\n  onTouched = Function.prototype;\r\n\r\n  /** Radio button value, will be set to `ngModel` */\r\n  @Input() btnRadio: string;\r\n  /** If `true` — radio button can be unchecked */\r\n  @Input() uncheckable: boolean;\r\n  /** Current value of radio component or group */\r\n  @Input()\r\n  get value() {\r\n    return this.group ? this.group.value : this._value;\r\n  }\r\n\r\n  set value(value: null | string) {\r\n    if (this.group) {\r\n      this.group.value = value;\r\n\r\n      return;\r\n    }\r\n    this._value = value;\r\n    this._onChange(value);\r\n  }\r\n  /** If `true` — radio button is disabled */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled;\r\n  }\r\n\r\n  set disabled(disabled: boolean) {\r\n    this.setDisabledState(disabled);\r\n  }\r\n\r\n  @HostBinding('attr.aria-disabled')\r\n  get controlOrGroupDisabled() {\r\n    return this.disabled || (this.group && this.group.disabled) ? true : undefined;\r\n  }\r\n\r\n  @HostBinding('class.disabled')\r\n  get hasDisabledClass() {\r\n    // Although the radio is disabled the active radio should still stand out.\r\n    // The disabled class will prevent this so don't add it on the active radio\r\n    return this.controlOrGroupDisabled && !this.isActive;\r\n  }\r\n\r\n  @HostBinding('class.active')\r\n  @HostBinding('attr.aria-checked')\r\n  get isActive(): boolean {\r\n    return this.btnRadio === this.value;\r\n  }\r\n\r\n  @HostBinding('attr.role') readonly role: string = 'radio';\r\n\r\n  @HostBinding('attr.tabindex')\r\n  get tabindex(): undefined | number {\r\n    if (this.controlOrGroupDisabled) {\r\n      // Disabled radio buttons should not receive focus\r\n      return undefined;\r\n    } else if (this.isActive || this.group == null) {\r\n      return 0;\r\n    } else {\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  get hasFocus(): boolean {\r\n    return this._hasFocus;\r\n  }\r\n\r\n  private _value: null | string;\r\n  private _disabled: boolean;\r\n  private _hasFocus = false;\r\n\r\n  constructor(\r\n    private el: ElementRef,\r\n    private cdr: ChangeDetectorRef,\r\n    private renderer: Renderer2,\r\n    @Optional()\r\n    @Inject(forwardRef(() => ButtonRadioGroupDirective))\r\n    private group: ButtonRadioGroupDirective\r\n  ) {}\r\n\r\n  @HostListener('click')\r\n  toggleIfAllowed(): void {\r\n    if (!this.canToggle()) {\r\n      return;\r\n    }\r\n\r\n    this.value = this.uncheckable && this.btnRadio === this.value ? undefined : this.btnRadio;\r\n  }\r\n\r\n  @HostListener('keydown.space', ['$event'])\r\n  onSpacePressed(event: KeyboardEvent) {\r\n    this.toggleIfAllowed();\r\n    event.preventDefault();\r\n  }\r\n\r\n  focus() {\r\n    this.el.nativeElement.focus();\r\n  }\r\n\r\n  @HostListener('focus')\r\n  onFocus() {\r\n    this._hasFocus = true;\r\n  }\r\n\r\n  @HostListener('blur')\r\n  onBlur() {\r\n    this._hasFocus = false;\r\n    this.onTouched();\r\n  }\r\n\r\n  canToggle(): boolean {\r\n    return !this.controlOrGroupDisabled && (this.uncheckable || this.btnRadio !== this.value);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.uncheckable = typeof this.uncheckable !== 'undefined';\r\n  }\r\n\r\n  _onChange(value: string): void {\r\n    if (this.group) {\r\n      this.group.value = value;\r\n\r\n      return;\r\n    }\r\n    this.onTouched();\r\n    this.onChange(value);\r\n  }\r\n\r\n  // ControlValueAccessor\r\n  // model -> view\r\n  writeValue(value: string): void {\r\n    this.value = value;\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  registerOnChange(fn: () => {}): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => {}): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(disabled: boolean): void {\r\n    this._disabled = disabled;\r\n    if (disabled) {\r\n      this.renderer.setAttribute(this.el.nativeElement, 'disabled', 'disabled');\r\n\r\n      return;\r\n    }\r\n    this.renderer.removeAttribute(this.el.nativeElement, 'disabled');\r\n  }\r\n}\r\n","import {\r\n  ChangeDetectorRef,\r\n  ContentChildren,\r\n  Directive,\r\n  forwardRef,\r\n  HostBinding,\r\n  HostListener,\r\n  Provider,\r\n  QueryList\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { ButtonRadioDirective } from './button-radio.directive';\r\n\r\nexport const RADIO_CONTROL_VALUE_ACCESSOR: Provider = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  /* tslint:disable-next-line: no-use-before-declare */\r\n  useExisting: forwardRef(() => ButtonRadioGroupDirective),\r\n  multi: true\r\n};\r\n\r\n/**\r\n * A group of radio buttons.\r\n * A value of a selected button is bound to a variable specified via ngModel.\r\n */\r\n@Directive({\r\n  selector: '[btnRadioGroup]',\r\n  providers: [RADIO_CONTROL_VALUE_ACCESSOR]\r\n})\r\nexport class ButtonRadioGroupDirective implements ControlValueAccessor {\r\n  onChange = Function.prototype;\r\n  onTouched = Function.prototype;\r\n\r\n  @HostBinding('attr.role') readonly role: string = 'radiogroup';\r\n\r\n  @ContentChildren(forwardRef(() => ButtonRadioDirective))\r\n  radioButtons: QueryList<ButtonRadioDirective>;\r\n\r\n  get value() {\r\n    return this._value;\r\n  }\r\n  set value(value: string | null) {\r\n    this._value = value;\r\n    this.onChange(value);\r\n  }\r\n\r\n  private _value: string | null;\r\n\r\n  private _disabled: boolean;\r\n\r\n  @HostBinding('attr.tabindex')\r\n  get tabindex(): null | number {\r\n    if (this._disabled) {\r\n      return null;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  constructor(private cdr: ChangeDetectorRef) {}\r\n\r\n  writeValue(value: string | null): void {\r\n    this._value = value;\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  registerOnChange(fn: () => {}): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => {}): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(disabled: boolean): void {\r\n    if (this.radioButtons) {\r\n      this._disabled = disabled;\r\n      this.radioButtons.forEach(buttons => {\r\n        buttons.setDisabledState(disabled);\r\n      });\r\n      this.cdr.markForCheck();\r\n    }\r\n  }\r\n\r\n  @HostListener('focus')\r\n  onFocus() {\r\n    if (this._disabled) {\r\n      return;\r\n    }\r\n    const activeRadio = this.getActiveOrFocusedRadio();\r\n    if (activeRadio) {\r\n      activeRadio.focus();\r\n    } else {\r\n      const firstEnabled = this.radioButtons.find(r => !r.disabled);\r\n      if (firstEnabled) {\r\n        firstEnabled.focus();\r\n      }\r\n    }\r\n  }\r\n\r\n  @HostListener('blur')\r\n  onBlur() {\r\n    if (this.onTouched) {\r\n      this.onTouched();\r\n    }\r\n  }\r\n\r\n  @HostListener('keydown.ArrowRight', ['$event'])\r\n  @HostListener('keydown.ArrowDown', ['$event'])\r\n  selectNext(event: KeyboardEvent) {\r\n    this.selectInDirection('next');\r\n    event.preventDefault();\r\n  }\r\n\r\n  @HostListener('keydown.ArrowLeft', ['$event'])\r\n  @HostListener('keydown.ArrowUp', ['$event'])\r\n  selectPrevious(event: KeyboardEvent) {\r\n    this.selectInDirection('previous');\r\n    event.preventDefault();\r\n  }\r\n\r\n  get disabled(): boolean {\r\n    return this._disabled;\r\n  }\r\n\r\n  private selectInDirection(direction: 'next' | 'previous') {\r\n    if (this._disabled) {\r\n      return;\r\n    }\r\n    function nextIndex(currentIndex: number, buttonRadioDirectives: ButtonRadioDirective[]) {\r\n      const step = direction === 'next' ? 1 : -1;\r\n      let calcIndex = (currentIndex + step) % buttonRadioDirectives.length;\r\n      if (calcIndex < 0) {\r\n        calcIndex = buttonRadioDirectives.length - 1;\r\n      }\r\n\r\n      return calcIndex;\r\n    }\r\n    const activeRadio = this.getActiveOrFocusedRadio();\r\n\r\n    if (activeRadio) {\r\n      const buttonRadioDirectives = this.radioButtons.toArray();\r\n      const currentActiveIndex = buttonRadioDirectives.indexOf(activeRadio);\r\n      for (\r\n        let i = nextIndex(currentActiveIndex, buttonRadioDirectives);\r\n        i !== currentActiveIndex;\r\n        i = nextIndex(i, buttonRadioDirectives)\r\n      ) {\r\n        if (buttonRadioDirectives[i].canToggle()) {\r\n          buttonRadioDirectives[i].toggleIfAllowed();\r\n          buttonRadioDirectives[i].focus();\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private getActiveOrFocusedRadio(): ButtonRadioDirective | undefined {\r\n    return this.radioButtons.find(button => button.isActive) || this.radioButtons.find(button => button.hasFocus);\r\n  }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\n\r\nimport { ButtonCheckboxDirective } from './button-checkbox.directive';\r\nimport { ButtonRadioDirective } from './button-radio.directive';\r\nimport { ButtonRadioGroupDirective } from './button-radio-group.directive';\r\n\r\n@NgModule({\r\n  declarations: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective],\r\n  exports: [ButtonCheckboxDirective, ButtonRadioDirective, ButtonRadioGroupDirective]\r\n})\r\nexport class ButtonsModule {\r\n  static forRoot(): ModuleWithProviders<ButtonsModule> {\r\n    return { ngModule: ButtonsModule, providers: [] };\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}